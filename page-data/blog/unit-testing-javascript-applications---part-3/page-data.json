{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/unit-testing-javascript-applications---part-3/","result":{"data":{"site":{"siteMetadata":{"title":"XKoji.dev","siteUrl":"https://www.xkoji.dev"}},"markdownRemark":{"id":"613ef09f-4362-5a6c-8667-8f67463e6243","excerpt":"We have talked about the basic unit testing concepts, why you should be writing unit tests, the approaches to writing unit testing, and we have also written…","html":"<p>We have talked about the basic unit testing concepts, why you should be writing unit tests, the approaches to writing unit testing, and we have also written some unit tests for Vuex getters, actions and mutations. In this post, we would be looking at writing unit tests for Vue.js components. Previously <a href=\"https://www.xkoji.dev/blog/unit-testing-javascript-applications---part-2/#defining-test-cases\" target=\"_blank\" rel=\"nofollow\">we described the things we need to consider for defining unit tests cases</a>. The same steps apply for writing tests for UI components:</p>\n<h3 id=\"define-the-inputs-and-outputs-of-the-component-based-on-its-public-interface\" style=\"position:relative;\">Define the inputs and outputs of the component based on its public interface</h3>\n<p>The inputs of Vue.js components include:</p>\n<ul>\n<li>user interaction (like a click, mouseover, keydown event)</li>\n<li>props provided to the component</li>\n<li>slots</li>\n<li>data from Vuex (via state and getters)</li>\n</ul>\n<p>The output of Vue.js components include:</p>\n<ul>\n<li>the rendered HTML</li>\n<li>emitted events</li>\n<li>called Vuex methods (actions and mutations)</li>\n</ul>\n<p>You might have noticed that this doesn’t include things like checking that a method on the Vue component was called, since those are only known to the Vue component and aren’t called by external parties. They are not part of the public interface of the component.</p>\n<h3 id=\"consider-the-dependencies-you-need-to-mock\" style=\"position:relative;\">Consider the dependencies you need to mock</h3>\n<p>As much as possible, the inputs and outputs of the component are where your focus should be when writing unit tests for your component. However, the component could have dependencies like using some Vue <a href=\"https://vuejs.org/v2/cookbook/adding-instance-properties.html\" target=\"_blank\" rel=\"nofollow\">instance prototype methods</a> that were defined elsewhere, importing a module dependency to handle some operation, using globally registered sub components, etc.</p>\n<p>Just like in other cases, the dependencies are not part of the functionality of the component you’re testing, so they should be mocked so you can focus on testing just your component. Knowing what to mock unfortunately requires knowledge about the internals of the component, which would mean that the test is more tightly coupled with the internal implementation of the component, which makes the tests less maintainable since any change to the internals of the component would always require an update to the unit tests as well. Luckily we would be using jest, so mocking dependencies would be easier.</p>\n<h3 id=\"consider-all-the-logical-execution-flows-within-the-component\" style=\"position:relative;\">Consider all the logical execution flows within the component</h3>\n<p>For a very robust solution, you should consider all the logical execution flows within your component, and create test cases to cover any of the missing flows. As <a href=\"https://www.xkoji.dev/blog/unit-testing-javascript-applications---part-2/#create-extra-test-cases-covering-all-the-logical-execution-flows\" target=\"_blank\" rel=\"nofollow\">mentioned before</a>, the logical flows are usually created by <code class=\"language-text\">if</code>, <code class=\"language-text\">switch</code>, and other short circuiting operations within the code. For Vue.js components, these can be created in the JS logic of the component, as well as in the component template using the <a href=\"https://vuejs.org/v2/guide/conditional.html\" target=\"_blank\" rel=\"nofollow\"><code class=\"language-text\">v-if</code></a> directive and other conditional rendering directives.</p>\n<h2 id=\"testing-tools\" style=\"position:relative;\">Testing Tools</h2>\n<p>As we have already seen, we use <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow\">Jest</a> testing framework for writing and running our unit tests. However Jest on its own can only carry us so far. UI components require extra specialized testing tools to be able to easily write tests for them. For Vue.js components, we use the <a href=\"https://vue-test-utils.vuejs.org/\" target=\"_blank\" rel=\"nofollow\">Vue test utils</a> which is maintained by the Vue.js team. It provides us with the ability to mount the Vue.js component, simulate user interactions, easily mock global plugins and mixins as well as mocking sub components, props, data, methods, etc. It also enables us to be able to check the rendered HTML as well as checking that certain events were emitted. We would use it within the Jest test cases.</p>\n<p>For a simple example, consider the following Vue component. It has a button that increments the counter, and displays the counter value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// counter.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div>\n      &lt;span class=\"count\">{{ count }}&lt;/span>\n      &lt;button @click=\"increment\">Increment&lt;/button>\n    &lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To test the component, you need to “mount” the component, creating a vue test utils <a href=\"https://vue-test-utils.vuejs.org/api/wrapper/#properties\" target=\"_blank\" rel=\"nofollow\">wrapper</a> which gives you several methods for manipulating, traversing and querying the underlying Vue component instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/test-utils'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should have a button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We mount the <code class=\"language-text\">Counter</code> component, creating an instance of the component wrapped within a wrapper. From the wrapper object, we can use the convenience methods to check if the button element exists and was rendered.</p>\n<blockquote>\n<p>The wrapper has several methods that could be useful. You should check out all the <a href=\"https://vue-test-utils.vuejs.org/api/wrapper/#properties\" target=\"_blank\" rel=\"nofollow\">available methods</a> to see what is available.</p>\n</blockquote>\n<h3 id=\"mount-vs-shallowmount\" style=\"position:relative;\">mount vs shallowMount</h3>\n<p>Vue test utils comes with two methods for mounting components: <code class=\"language-text\">mount</code> and <code class=\"language-text\">shallowMount</code>. <code class=\"language-text\">mount</code> instantiates the component along with all its sub components initialized as well, building out the whole DOM tree. <code class=\"language-text\">shallowMount</code> on the other hand instantiates the component but stubs out the sub components, replacing them with stubs. This ensures that its just the current component that is executed during the test. This aligns with the idea of mocking dependencies instead of executing the real dependencies. This makes the tests run faster, and also keeps the tests isolated, which is something we have established that you need when running unit tests.</p>\n<h2 id=\"lets-write-some-tests\" style=\"position:relative;\">Let’s write some tests!</h2>\n<p>Again, we will be using the <a href=\"https://github.com/imolorhe/rick-morty\" target=\"_blank\" rel=\"nofollow\">rick and morty web app</a> as the case study and we would be writing unit tests for the components.</p>\n<p>The app is a simple one with a few views and components: CharacterCard, Pagination, and Header. We would be testing the <strong>CharacterCard</strong> component here.</p>\n<p>The <strong>CharacterCard</strong> component simply displays the basic details about a character in a card form. So as you would expect, it takes as input a <code class=\"language-text\">character</code> prop. It also emits the <code class=\"language-text\">click</code> event when the card is clicked.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  &lt;div\n    class=\"max-w-sm w-full lg:max-w-full lg:flex shadow-md hover:shadow-xl transition duration-300 ease-in transform hover:-translate-y-px rounded cursor-pointer\"\n    @click=\"onClickCard\"\n  >\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\">`<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>'${character.image}'<span class=\"token punctuation\">)</span></span>`</span><span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">:title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>character.name<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col flex-grow justify-between leading-normal text-left<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mb-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text-gray-900 font-bold text-xl mb-2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> character<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text-sm text-gray-600<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> character<span class=\"token punctuation\">.</span>gender <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> &amp;middot;\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span>\n              <span class=\"token attr-name\">tid</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>character-card-status<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>statusClasses<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> character<span class=\"token punctuation\">.</span>status <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span>\n            <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            &amp;middot; </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> character<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text-sm text-gray-600 flex items-center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>../assets/planet.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>w-5 mr-1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> character<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mb-3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span>\n          <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> character<span class=\"token punctuation\">.</span>species <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nimport Vue from 'vue';\n\nexport default Vue.extend({\n  name: 'CharacterCard',\n  props: {\n    character: {\n      type: Object,\n      required: true,\n    },\n  },\n  computed: {\n    statusClasses(): unknown {\n      return {\n        'ml-1': true,\n        'text-green-600': this.character.status === 'Alive',\n        'text-red-600': this.character.status !== 'Alive',\n      };\n    },\n  },\n  methods: {\n    onClickCard() {\n      this.$emit('click', this.character);\n    },\n  },\n});\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Like we have previously discussed about defining the test cases:</p>\n<ul>\n<li>We start by identifying the <strong>inputs</strong> and <strong>outputs</strong> of the component. The inputs here include: the <code class=\"language-text\">character</code> props, and the user click action. The outputs would be: the rendered component (with all the expected data), and the emitted <code class=\"language-text\">click</code> event, after the user clicks the card.</li>\n<li>Next, we check the dependencies of the component. In this case, there isn’t any dependencies, so we skip this.</li>\n<li>Finally, we check all logical execution flows. There’s one conditional in the <code class=\"language-text\">statusClasses()</code> computed properties, although it’s nt very obvious. When the character status is “Alive”, we set the <code class=\"language-text\">green</code> class, else we set the <code class=\"language-text\">red</code> class. This is one of those conditions that isn’t very obvious at first glance. A good way to find these is to check for the conditional expressions (equalities <code class=\"language-text\">===</code> <code class=\"language-text\">!==</code>, greater than <code class=\"language-text\">&gt;=</code>, less than <code class=\"language-text\">&lt;=</code>, negation <code class=\"language-text\">!</code>, etc).</li>\n</ul>\n<p>From this, we can see that the test cases required are not much.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> CharacterCard <span class=\"token keyword\">from</span> <span class=\"token string\">'./CharacterCard.vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallowMount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/test-utils'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CharacterCard'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render the character basic details'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Character'</span><span class=\"token punctuation\">,</span>\n      image<span class=\"token operator\">:</span> <span class=\"token string\">'character.jpg'</span><span class=\"token punctuation\">,</span>\n      gender<span class=\"token operator\">:</span> <span class=\"token string\">'Gender'</span><span class=\"token punctuation\">,</span>\n      status<span class=\"token operator\">:</span> <span class=\"token string\">'Alive'</span><span class=\"token punctuation\">,</span>\n      species<span class=\"token operator\">:</span> <span class=\"token string\">'Human'</span><span class=\"token punctuation\">,</span>\n      origin<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      location<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Location'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>CharacterCard<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      propsData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        character<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>species<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render status as green if alive'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>CharacterCard<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      propsData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        character<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n      comp\n        <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[tid=\"character-card-status\"]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">classes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text-green-600'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render status as red if dead'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>CharacterCard<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      propsData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        character<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n      comp\n        <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[tid=\"character-card-status\"]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">classes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text-red-600'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should emit click with the character when clicked'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>CharacterCard<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      propsData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        character<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    comp<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">emitted</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">emitted</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>First we check that the basic character info are rendered in the output. The next test case checks that the <code class=\"language-text\">green</code> class is rendered when <code class=\"language-text\">character.status</code> is “Alive”. After that we check the else clause: that the <code class=\"language-text\">red</code> class is rendered instead. <em>Note the <code class=\"language-text\">tid</code> attribute added to the status element. This makes it easy to select that element in the test.</em> Finally, we check that the click event is emitted when the user clicks the character card.</p>\n<h3 id=\"snapshot-testing\" style=\"position:relative;\">Snapshot testing</h3>\n<p>As you might have noticed in the first test case, to verify that the character info is rendered as we expect, we needed to add a lot of <code class=\"language-text\">expect</code> assertions for the different data points. This is already a lot of assertions for a simple test case. You can imagine how many more <code class=\"language-text\">expect</code> assertions would be required for more complex components. This makes the tests less maintainable, as changes made could require you to update several of the assertions. One way to solve this kinds of test cases is with <a href=\"https://jestjs.io/docs/en/snapshot-testing\" target=\"_blank\" rel=\"nofollow\">snapshot testing</a>.</p>\n<p>Snapshot testing basically allows us to render our component and save the rendered output to disk (as a snapshot of the component), and use this rendered output as a reference when running future tests. If the rendered output during a test is different from the original snapshot, the test would fail. You can then compare the two snapshots to see the difference, and then determine if the new rendered output is valid or not, and update the snapshot.</p>\n<p>One of the limitations that appear when using snapshot is how you manage dynamic content. For example, assuming a component renders the current date, each time the snapshot test is run, the snapshots would be different. The recommended way to go around this is by mocking the dependencies (in this case, the <code class=\"language-text\">Date</code> object) as we have previously discussed.</p>\n<p>If we re-write the first test case using snapshot testing, we would have this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render the character basic details'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Character'</span><span class=\"token punctuation\">,</span>\n    image<span class=\"token operator\">:</span> <span class=\"token string\">'character.jpg'</span><span class=\"token punctuation\">,</span>\n    gender<span class=\"token operator\">:</span> <span class=\"token string\">'Gender'</span><span class=\"token punctuation\">,</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">'Alive'</span><span class=\"token punctuation\">,</span>\n    species<span class=\"token operator\">:</span> <span class=\"token string\">'Human'</span><span class=\"token punctuation\">,</span>\n    origin<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    location<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Location'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>CharacterCard<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    propsData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      character<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We replaced all the assertions with a single <code class=\"language-text\">expect(comp.html()).toMatchSnapshot()</code>. This is much cleaner, and easier to maintain. Generally when testing the rendered component output, snapshot testing makes for a cleaner testing approach.</p>\n<p>The snapshot looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`CharacterCard should render the character basic details 1`] = `\n&lt;div class=&quot;max-w-sm w-full lg:max-w-full lg:flex shadow-md hover:shadow-xl transition duration-300 ease-in transform hover:-translate-y-px rounded cursor-pointer&quot;&gt;\n  &lt;div title=&quot;Character&quot; class=&quot;h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden&quot; style=&quot;background-image: url(character.jpg);&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col flex-grow justify-between leading-normal text-left&quot;&gt;\n    &lt;div class=&quot;mb-8&quot;&gt;\n      &lt;div class=&quot;text-gray-900 font-bold text-xl mb-2&quot;&gt;\n        Character\n        &lt;div class=&quot;text-sm text-gray-600&quot;&gt;\n          Gender ·\n          &lt;span tid=&quot;character-card-status&quot; class=&quot;ml-1 text-green-600&quot;&gt;Alive&lt;/span&gt;\n          · Origin\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;p class=&quot;text-sm text-gray-600 flex items-center&quot;&gt;&lt;img src=&quot;../assets/planet.png&quot; class=&quot;w-5 mr-1&quot;&gt;\n        Location\n      &lt;/p&gt;\n      &lt;div class=&quot;mb-3&quot;&gt;&lt;/div&gt; &lt;span class=&quot;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2&quot;&gt;Human&lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n`;</code></pre></div>\n<blockquote>\n<p>Note: You would need the <a href=\"https://www.npmjs.com/package/jest-serializer-vue\" target=\"_blank\" rel=\"nofollow\">jest-serializer-vue</a> snapshot serializer to generate useful snapshots for your Vue components.</p>\n</blockquote>\n<p>Let’s consider writing a test for the <strong>Header</strong> component. It just displays the logo and a list of links used for navigating between pages.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span>\n    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>flex items-center justify-between flex-wrap bg-purple-900 p-6<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    &lt;!-- ... -->\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>w-full block flex-grow lg:flex lg:items-center lg:w-auto<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text-md lg:flex-grow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span>\n          <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>block mt-4 lg:inline-block lg:mt-0 text-purple-200 rounded-full lg:hover:bg-purple-800 lg:px-3 py-1 hover:text-white mr-4 transition duration-300<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Home\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span>\n          <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>block mt-4 lg:inline-block lg:mt-0 text-purple-200 rounded-full lg:hover:bg-purple-800 lg:px-3 py-1 hover:text-white mr-4 transition duration-300<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          About\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span>\n          <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>block mt-4 lg:inline-block lg:mt-0 text-purple-200 rounded-full lg:hover:bg-purple-800 lg:px-3 py-1 hover:text-white mr-4 transition duration-300<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/characters<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Characters\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'Header',\n});\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We can define the test cases as follows:</p>\n<ul>\n<li><strong>inputs and outputs:</strong> it doesn’t really have any inputs. Although it contains <code class=\"language-text\">router-link</code> components that the user’s can click, the click interaction occurs on the <code class=\"language-text\">router-link</code> component, not the <code class=\"language-text\">Header</code> component. For the output, we only have the rendered component output.</li>\n<li><strong>mocking dependencies:</strong> it contains <code class=\"language-text\">router-link</code> components for navigating the user between pages. <code class=\"language-text\">router-link</code> component is globally registered, and is not registered locally within the <strong>Header</strong> component, so using <code class=\"language-text\">shallowMount</code> would not stub the component. We would need to explicitly stub it out ourselves.</li>\n<li><strong>logical execution flows:</strong> it doesn’t have any conditional statements or expressions in the templates or scripts section, so we can skip this.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">'./Header.vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallowMount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/test-utils'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Header'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>Header<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      stubs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        RouterLink<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We have a single test case that asserts the rendered output. Given what we know about testing rendered output, we just use a <code class=\"language-text\">expect(comp.html()).toMatchSnapshot()</code>.</p>\n<p>Like we mentioned, the <code class=\"language-text\">router-link</code> component is not registered locally within the <code class=\"language-text\">Header</code> component. So <code class=\"language-text\">shallowMount</code> wouldn’t know to create a stub for it. Fortunately, we can explicitly indicate to <code class=\"language-text\">shallowMount</code> that it should stub the <code class=\"language-text\">router-link</code> component. <em>Note that we can use either <code class=\"language-text\">RouterLink: true</code> or <code class=\"language-text\">&#39;router-link&#39;: true</code>. Vue uses both formats for defining component names.</em> Setting <code class=\"language-text\">RouterLink</code> to true tells <code class=\"language-text\">shallowMount</code> to create a simple dummy stub. If you check the generated snapshot, you’d notice that the <code class=\"language-text\">router-link</code> component is now <code class=\"language-text\">routerlink-stub</code>.</p>\n<p>You can also pass a component to be used as the stub instead, if you’d like.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> routerStub <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div>&lt;/div>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>Header<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  stubs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    RouterLink<span class=\"token operator\">:</span> routerStub<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testing-with-subcomponents-that-use-slots\" style=\"position:relative;\">Testing with subcomponents that use slots</h3>\n<p>Sometimes you would have sub components that use <a href=\"https://vuejs.org/v2/guide/components-slots.html\" target=\"_blank\" rel=\"nofollow\">slots</a> to specify where specific contents would be rendered.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">My wonderful component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySelect</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">My select label</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">My select error message</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MySelect</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nimport Vue from 'vue';\nimport MySelect from './MySelect.vue';\n\nexport default Vue.extend({\n  name: 'MyWonderfulComponent',\n  components: {\n    MySelect,\n  }\n});\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Here the <code class=\"language-text\">MySelect</code> component has a <strong>label</strong> and <strong>error</strong> slots, which we pass values to. If we write a unit test for <code class=\"language-text\">MyWonderfulComponent</code> component using <code class=\"language-text\">shallowMount</code>, you would notice that the rendered output doesn’t contain the text for the label and error slots, because the <code class=\"language-text\">MySelect</code> component would have been stubbed with a dummy stub component which doesn’t use slots. To work around this, we can provide our own stub component to be used to replace <code class=\"language-text\">MySelect</code> component in a deterministic way, and use that during the test rather than the real <code class=\"language-text\">MySelect</code> component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mySelectStub <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>\n    &lt;div class=\"label-slot\">\n      &lt;slot name=\"label\">&lt;/slot>\n    &lt;/div>\n    &lt;div class=\"error-slot\">\n      &lt;slot name=\"error\">&lt;/slot>\n    &lt;/div>\n    &lt;div class=\"default-slot\">\n      &lt;slot />\n    &lt;/div>\n  &lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> comp <span class=\"token operator\">=</span> <span class=\"token function\">shallowMount</span><span class=\"token punctuation\">(</span>Header<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  stubs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    MySelect<span class=\"token operator\">:</span> mySelectStub<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With this, we would have the slots rendered, and we can check for that easily.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\">Conclusion</h2>\n<p>One final note about dependencies is that: <em>not all dependencies are equal</em>. In the previous article, we asked the question about whether <code class=\"language-text\">Vue.set()</code> used within mutations should be mocked when writing unit tests. To determine if a dependency should be mocked, these are a couple of questions that can help you decide:</p>\n<ul>\n<li>is it a <a href=\"https://www.xkoji.dev/blog/unit-testing-javascript-applications-part-1/#pure-functions\" target=\"_blank\" rel=\"nofollow\">pure function</a> dependency? This means it doesn’t have an effect on any thing besides returning an output for the input you give it.</li>\n<li>if it has side effects, are they local to the piece of code being tested? For example, <code class=\"language-text\">Vue.set()</code> only mutates the given input, and does nothing else.</li>\n<li>is its output dependent on external factors? This affects the deterministic nature of the dependency. For example, <code class=\"language-text\">Date.now()</code> would give a different result based on the current time.</li>\n<li>is it difficult to mock the dependency? Does mocking dependency require a whole lot more work (like A LOT MORE) than actually writing the test?</li>\n</ul>\n<p>Usually this question comes up when dealing with implicit dependencies, because they make mocking dependencies hard.</p>\n<p>Over the course of this series, we have looked at unit testing approaches, and how to write unit tests for different forms of code. We looked at how to mock dependencies as well as how to make writing tests easier. We considered the TDD approach and saw how we can write our code following that pattern. We have also looked at various testing tools like Jest and the Vue test utils for a robust unit testing solution.</p>\n<p>While it is recommended to follow the TDD approach as much as possible due to the benefits you get, it is not a mandatory practice for writing unit tests. Following the testing approach for defining your test cases, you can have full test coverage of your code, even if you write the tests afterwards.</p>\n<p>Writing unit tests doesn’t have to be hard. Following a defined approach makes it easier.</p>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"#define-the-inputs-and-outputs-of-the-component-based-on-its-public-interface\">Define the inputs and outputs of the component based on its public interface</a></li>\n<li><a href=\"#consider-the-dependencies-you-need-to-mock\">Consider the dependencies you need to mock</a></li>\n<li><a href=\"#consider-all-the-logical-execution-flows-within-the-component\">Consider all the logical execution flows within the component</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#testing-tools\">Testing Tools</a></p>\n<ul>\n<li><a href=\"#mount-vs-shallowmount\">mount vs shallowMount</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#lets-write-some-tests\">Let’s write some tests!</a></p>\n<ul>\n<li><a href=\"#snapshot-testing\">Snapshot testing</a></li>\n<li><a href=\"#testing-with-subcomponents-that-use-slots\">Testing with subcomponents that use slots</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Unit testing JavaScript Applications - Part 3 (Vue components)","date":"June 09, 2020","description":"","image":null}}},"pageContext":{"slug":"/blog/unit-testing-javascript-applications---part-3/","previous":{"fields":{"slug":"/blog/unit-testing-javascript-applications---part-2/"},"frontmatter":{"title":"Unit testing JavaScript Applications - Part 2","draft":null}},"next":null}}}