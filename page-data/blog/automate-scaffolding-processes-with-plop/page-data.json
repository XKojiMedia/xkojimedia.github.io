{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/automate-scaffolding-processes-with-plop/","result":{"data":{"site":{"siteMetadata":{"title":"XKoji.dev","siteUrl":"https://www.xkoji.dev"}},"markdownRemark":{"id":"702ec371-bc69-55d4-a704-f005196e5e87","excerpt":"I recently published a post detailing how I created this blog using Gatsby to get up and running in little time. Gatsby as a static site generator does a lot of‚Ä¶","html":"<p>I recently published a <a href=\"https://www.xkoji.dev/blog/set-up-a-blog-with-gatsby-github-pages-and-github-actions/\">post detailing how I created this blog using Gatsby</a> to get up and running in little time. Gatsby as a static site generator does a lot of useful things for you through the rich plugin ecosystem that it has, enabling you do things like creating a blog like this one. However the process of creating a new blog post isn‚Äôt as easy as opening a new URL. You have to create the markdown files and directories yourself manually. This might be okay at first but quickly becomes monotonous, and you know what they say:</p>\n<blockquote>\n<p>If a task doesn‚Äôt require critical thinking, doesn‚Äôt require human input, monotonous, repetitive,</p>\n<p>Why not automate it?</p>\n</blockquote>\n<p>This quote aligns very much with most of us developers, and that‚Äôs exactly what we are going to do! üòÅ</p>\n<p><strong><a href=\"https://plopjs.com/\">Plop</a></strong> is a tool that was built with the intention of solving these kinds of problems. Quoting the plop site,</p>\n<blockquote>\n<p>Plop is a little tool that saves you time and helps your team build new files with consistency.</p>\n<p>Plop generates code when you want, how you want, and can be changed whenever you want.</p>\n</blockquote>\n<p><strong>‚ÄúWhat about <a href=\"https://yeoman.io/\">yeoman</a>?‚Äù</strong>, you might ask. Yeoman looks to be tuned towards scaffolding entire web apps as opposed to scaffolding little bits of the app. Although yeoman generators can also generate the little bits of the app as well, those come as added benefits to the full app generator. Also yeoman generators need to be used as an extra node package that would be installed as a dependency (either by publishing it or locally by <a href=\"https://classic.yarnpkg.com/en/docs/cli/link/\">linking it</a>) before it can be used. That‚Äôs a lot more setup than is required. On the other hand, plop only really needs a <code class=\"language-text\">plopfile.js</code> file at the root of your project, and for plop to be installed as a dependency.</p>\n<p>Here I‚Äôll describe how I used plop to automate scaffolding a new blog post.</p>\n<p>First let‚Äôs define the specifics of what we need:</p>\n<ul>\n<li>The posts are stored in <code class=\"language-text\">content/blog/</code> with directories describing the post <em>slug</em>, and an <code class=\"language-text\">index.md</code> file. For example, <code class=\"language-text\">content/blog/hello-world/index.md</code> <em>You can check the <a href=\"https://www.xkoji.dev/blog/set-up-a-blog-with-gatsby-github-pages-and-github-actions/\">previous post</a> to see how we set this up or you can follow along using <a href=\"https://www.gatsbyjs.org/starters/gatsbyjs/gatsby-starter-blog/\">this Gatsby starter</a>.</em></li>\n<li>Each post written in markdown contains frontmatter used to describe the post and specify metadata about the post like the title, date, tags and the author. All of that data needs to be provided by the user except perhaps the date, since you would usually use today‚Äôs date there. That‚Äôs pretty much all the information we need to have a new post.</li>\n</ul>\n<p>To get started with plop, make sure you install it using <code class=\"language-text\">yarn add --dev plop</code>. The plop docs recommend installing plop globally in your system, but I would recommend installing it locally since it is a dependency of one project, and not necessarily required to be a global package. <em>For this post, I would be assuming you have plop installed as a local dependency.</em></p>\n<p>Now create a <code class=\"language-text\">plopfile.js</code> file with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/** @type {import('plop').NodePlopAPI} */</span>\n  plop\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setHelper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>val <span class=\"token operator\">?</span> val <span class=\"token operator\">:</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^A-Za-z0-9_]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setHelper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yamlCommaToList'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>val <span class=\"token operator\">?</span> val <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[ </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> ]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">'New blog post'</span><span class=\"token punctuation\">,</span>\n    prompts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'postTitle'</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Title of blog post:'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'twitterHandle'</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Twitter handle of author:'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'tags'</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Specify list of tags:'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'content/blog/{{slug postTitle}}/index.md'</span><span class=\"token punctuation\">,</span>\n      templateFile<span class=\"token operator\">:</span> <span class=\"token string\">'.plop/templates/post-md.hbs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          todayDate<span class=\"token operator\">:</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the most part, this is straightforward what is going on here (you should check the <a href=\"https://plopjs.com/documentation/\">docs</a> for some more detailed documentation on the API). I‚Äôll explain what is going on here.</p>\n<p>Plopfiles are simple node ‚Äúmodules‚Äù that export a function. This function takes the <code class=\"language-text\">plop</code> object, giving access to the plop API.\n<code class=\"language-text\">plop.setHelper()</code> provides an interface to register a <a href=\"http://handlebarsjs.com/api-reference/runtime.html#handlebars-registerhelper-name-helper\">handlebars helper</a>. That‚Äôs right - Plop uses <a href=\"http://handlebarsjs.com/\">handlebars</a> as the templating engine for scaffolding. Knowledge of handlebars wouldn‚Äôt be necessary for the basic scaffolding needs but for more logic or conditionals, you would need to learn a bit of the handlebars syntax. For our case though, we only need to know the <code class=\"language-text\">{{ data }}</code> double syntax which is used for interpolating data in templates, and the <code class=\"language-text\">{{ helperfn data }}</code> helper syntax. Here, <code class=\"language-text\">helperfn</code> is a handlebars helper function that accepts <code class=\"language-text\">data</code> and returns a value. This is mostly how you would encapsulate logic within your templates. We have defined two helpers: <code class=\"language-text\">slug</code> which takes a string and transforms it to a human-readable, URL-compliant, kebab-case form (e.g. <code class=\"language-text\">Hello world</code> becomes <code class=\"language-text\">hello-world</code>), and <code class=\"language-text\">yamlCommaToList</code> which takes a string containing of list of values separated by commas, and returns a valid yaml array to represent the same data in yaml format (e.g. <code class=\"language-text\">Hello, world, Here,I,come</code> becomes <code class=\"language-text\">[ Hello, world, Here, I, come ]</code>).</p>\n<p>Next we define the generator using <code class=\"language-text\">plop.setGenerator()</code>. We specify the name of the generator (used to specify which generator to initiate) and a configuration object. In the configuration, we specify the <code class=\"language-text\">description</code> of the generator, <code class=\"language-text\">prompts</code>, and <code class=\"language-text\">actions</code>.\nThe <strong>prompts</strong> define the list of different inputs we would ask from the user when scaffolding. These prompt configs are passed to <a href=\"https://github.com/SBoudrias/Inquirer.js\">inquirer.js</a> which plop uses to accept the user input. For a list of valid prompt options, you would need to check the docs for inquirer.js.\nThe <strong>actions</strong> define the list of things that plop would do with the provided input. You can find a list of the predefined actions <a href=\"https://plopjs.com/documentation/#built-in-actions\">here</a> which do things like adding files, directories, modifying files, appending content to the end of files. You can also provide custom actions if you need them. Here, we have defined an action to add a new file in the specified path (notice we use the slug helper here to set the slug in the file path) and using a handlebars <code class=\"language-text\">templateFile</code> (we will look at the content of the template shortly). We also specified a <code class=\"language-text\">data</code> function. This function returns an object that is merged with the data provided by the user when rendering the template. Here we add the <code class=\"language-text\">todayDate</code> data for use in the template file.</p>\n<p>This is the content of the <code class=\"language-text\">post-md.hbs</code> used as the template for the newly generated post markdown file.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> postTitle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> todayDate <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> yamlCommaToList tags <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token key atrule\">twitterHandle</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{{ twitterHandle }}'</span>\n<span class=\"token punctuation\">---</span>\n\nNew blog post begins<span class=\"token tag\">!</span></code></pre></div>\n<p>That is pretty much everything you need. You can test out the plop scaffolding by running <code class=\"language-text\">yarn plop</code> at the root of your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=imolorhe data-host=localhost></span><span data-user=imolorhe data-host=localhost></span><span data-user=imolorhe data-host=localhost></span><span data-user=imolorhe data-host=localhost></span></span>? Title of blog post: asdfghjk\n? Twitter handle of author: imolorhe\n? Specify list of tags: twitter, linkedin, social\n‚úî  ++ /content/blog/asdfghjk/index.md</code></pre></div>\n<p>This would run the locally installed plop package. When you run plop without specifying the <code class=\"language-text\">--plopfile</code> in the command, plop looks for the <code class=\"language-text\">plopfile.js</code> file at the root of the project, which is where we have added ours.\nIt should prompt you to provide the post title, author twitter handle, and list of tags. You should then see the generated file <code class=\"language-text\">content/blog/asdfghjk/index.md</code> in the project containing the rendered post template.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> asdfghjk\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2020-05-04T00:05:04.669Z</span>\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> twitter<span class=\"token punctuation\">,</span> linkedin<span class=\"token punctuation\">,</span> social <span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">twitterHandle</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'imolorhe'</span>\n<span class=\"token punctuation\">---</span>\n\nNew blog post begins<span class=\"token tag\">!</span></code></pre></div>\n<p>For convenience and visibility of the feature, you can add a new script in the <code class=\"language-text\">package.json</code> file to run plop. It is easier for people that are new to your project to know that you use plop for scaffolding if they see it in your list of package.json scripts.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn plop\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>While I used plop to generate a simple file for a blog post, you can use plop for much more scaffolding with the different options available to you. The dynamic nature of the plop actions, allow for performing several other tasks, including async actions (like fetching some content from some API). Now you don‚Äôt have to keep repeating those tasks. Instead, you could spend about half an hour (or a bit more) setting up a simple plop-based process automation, sit back and enjoy! üòÑ</p>\n<p>‚úåüèæ</p>","frontmatter":{"title":"Automate scaffolding processes with Plop","date":"May 03, 2020","description":"","image":null}}},"pageContext":{"slug":"/blog/automate-scaffolding-processes-with-plop/","previous":{"fields":{"slug":"/blog/set-up-a-blog-with-gatsby-github-pages-and-github-actions/"},"frontmatter":{"title":"Set up a blog with Gatsby, GitHub pages and GitHub actions"}},"next":{"fields":{"slug":"/blog/local-vs-global-npm-dependencies/"},"frontmatter":{"title":"Local vs global npm dependencies"}}}}}